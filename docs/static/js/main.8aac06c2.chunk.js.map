{"version":3,"sources":["store/promiseMiddleware.js","constants.js","reducer.js","components/SortableList.js","components/ListItem.js","App.js","actions.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["promiseMiddleware","next","action","promise","type","transform","rest","SUCCESS","REQUEST","FAILURE","then","res","data","catch","error","console","actiontypes","state","Object","assign","loading","fields","backup","position","bin","deletedItem","slice","splice","recycledItem","saving","SortableList","props","sort","dragging","dataUpdated","me","setState","updateFields","dragEnd","undefined","dragStart","e","dragged","Number","currentTarget","dataset","id","dataTransfer","effectAllowed","setData","dragOver","preventDefault","over","from","isFinite","to","items","this","ListItem","className","map","item","idx","draggableProps","draggable","onDragEnd","onDragOver","onDragStart","key","onDelete","deleteField","Component","isBin","isMandatory","mandatory","expectedValues","autoComplete","placeholder","fieldName","onClick","restoreField","length","val","indx","App","componentDidMount","getFields","_saveFields","saveFields","resetFields","PureComponent","connect","dispatch","resourceURI","axios","get","updatedFields","field","order","post","Boolean","window","location","hostname","match","store","initialState","middleware","thunk","compose","applyMiddleware","createStore","finalCreateStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8aac06c2.chunk.js","sourcesContent":["export default function promiseMiddleware() {\n  return next => action => {\n    const { promise, type, transform, ...rest } = action;\n\n    if (!promise) {\n      return next(action);\n    }\n\n    const SUCCESS = type;\n    const REQUEST = type + '_REQUEST';\n    const FAILURE = type + '_FAILURE';\n\n    next({ ...rest, type: REQUEST });\n\n    return promise\n      .then(res => {\n        let data = {};\n        if (typeof transform === 'function') {\n          data = transform({ res, ...rest });\n        } else {\n          data = res.data\n        }\n        next({ ...rest, data, res, type: SUCCESS });\n        return true;\n      })\n      .catch(error => {\n        next({ ...rest, error, type: FAILURE });\n        console.error(error);\n        return false;\n      });\n  };\n}\n","const actiontypes = {\n  GET_FIELDS: 'GET_FIELDS',\n  GET_FIELDS_REQUEST: 'GET_FIELDS_REQUEST',\n  GET_FIELDS_ERROR: 'GET_FIELDS_ERROR',\n  DELETE_FIELD: 'DELETE_FIELD',\n  RESTORE_FIELD: 'RESTORE_FIELD',\n  RESET_FIELDS: 'RESET_FIELDS',\n  UPDATE_FIELDS: 'UPDATE_FIELDS',\n  SAVE_FIELDS: 'SAVE_FIELDS',\n  SAVE_FIELDS_REQUEST: 'SAVE_FIELDS_REQUEST',\n  SAVE_FIELDS_ERROR: 'SAVE_FIELDS_ERROR'\n}\n\nexport {\n  actiontypes\n}","import { actiontypes } from './constants'\n\nexport default (state = {}, action = {}) => {\n  switch (action.type) {\n    case actiontypes.GET_FIELDS_REQUEST: {\n      return Object.assign({}, state, { loading: true })\n    }\n    case actiontypes.GET_FIELDS_ERROR: {\n      return Object.assign({}, state, { loading: false })\n    }\n    case actiontypes.GET_FIELDS: {\n      const { data = [] } = action\n      return Object.assign({}, state, {\n        fields: data,\n        backup: data,\n        loading: false\n      })\n    }\n    case actiontypes.UPDATE_FIELDS: {\n      const { fields = [] } = action\n      return Object.assign({}, state, { fields })\n    }\n    case actiontypes.DELETE_FIELD: {\n      const { position } = action\n      let { fields = [], bin = [] } = state\n      const deletedItem = fields[position]\n      fields = fields.slice(0)\n      fields.splice(position, 1)\n      return Object.assign({}, state, {\n        fields,\n        bin: [...bin, deletedItem]\n      })\n    }\n    case actiontypes.RESTORE_FIELD: {\n      const { position } = action\n      let { fields = [], bin = [] } = state\n      const recycledItem = bin[position]\n      bin = bin.slice(0)\n      bin.splice(position, 1)\n      return Object.assign({}, state, {\n        fields: [...fields, recycledItem],\n        bin\n      })\n    }\n    case actiontypes.RESET_FIELDS: {\n      const { backup } = state\n      return Object.assign({\n        fields: backup.slice(0),\n        bin: [],\n        backup\n      })\n    }\n    case actiontypes.SAVE_FIELDS_REQUEST: {\n      return Object.assign({}, state, { saving: true })\n    }\n    case actiontypes.SAVE_FIELDS:\n    case actiontypes.SAVE_FIELDS_ERROR: {\n      return Object.assign({}, state, { saving: false })\n    }\n    default: return state\n  }\n}","import React, { Component } from 'react'\n/**\n * Sortable List module\n * A sortable list component using html5 drag and drop api.\n **/\nexport default class SortableList extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { dragging: undefined }\n  }\n  sort = (data, dragging, dataUpdated = false) => {\n    const me = this\n    if (dataUpdated) {\n      me.setState({ dragging }, () => {\n        me.props.updateFields(data)\n      });\n    }\n  }\n  dragEnd = () => {\n    const data = this.data.slice(0)\n    this.sort(data, undefined, true);\n  }\n  dragStart = (e) => {\n    this.dragged = Number(e.currentTarget.dataset.id);\n    e.dataTransfer.effectAllowed = 'move';\n    // Firefox requires calling dataTransfer.setData\n    // for the drag to properly work\n    e.dataTransfer.setData(\"text/html\", null);\n  }\n  dragOver = (e) => {\n    e.preventDefault();\n    var over = e.currentTarget\n    var dragging = this.state.dragging;\n    var from = isFinite(dragging) ? dragging : this.dragged;\n    var to = Number(over.dataset.id);\n    // if ((e.clientY - over.offsetTop) > (over.offsetHeight / 2)) to++;\n    // if (from < to) to--;\n    // Move from 'a' to 'b'\n    var items = this.props.data.slice(0);\n    items.splice(to, 0, items.splice(from, 1)[0]);\n    this.sort(items, to, false);\n    this.data = items\n  }\n  render() {\n    const { data = [] } = this.props\n    const ListItem = this.props.ListItem\n    return (\n      <div className=\"columns is-multiline\">\n        {\n          data.map((item, idx) => {\n            let dragging = (idx === this.state.dragging) ? \"dragging\" : \"\";\n            let draggableProps = {\n              \"data-id\": idx,\n              dragging,\n              draggable: true,\n              onDragEnd: this.dragEnd,\n              onDragOver: this.dragOver,\n              onDragStart: this.dragStart\n            }\n            return (\n              <ListItem\n                draggableProps={draggableProps}\n                item={item}\n                key={'' + idx}\n                idx={idx}\n                onDelete = {this.props.deleteField}\n              />\n            )\n          })\n        }\n      </div>\n    )\n  }\n}","import React from 'react';\n\nconst ListItem = props => {\n  const { item = {}, draggableProps = {}, idx = '', isBin = false } = props\n  const dragging = draggableProps.dragging ? 'dragging' : ''\n  const isMandatory = item.mandatory === 'Y' ? true : false\n  const expectedValues = item.expectedValues || []\n  return (\n    <div className={`column is-half-desktop ${dragging}`} {...draggableProps}>\n      <div className=\"box drag-box\">\n        <div className=\"level is-mobile\">\n          <div className=\"level-left\">\n            <div className=\"level-item\">\n              <span className=\"icon grip\">\n                <i className=\"fas fa-lg fa-grip-vertical\"></i>\n              </span>\n            </div>\n          </div>\n          <div className=\"level-item\">\n            <input type=\"text\" autoComplete=\"nope\" placeholder={item.fieldName} className={`input ${isMandatory ? 'is-success' : ''}`} />\n          </div>\n          <div className=\"level-right\">\n            <div className=\"level-item\">\n              <span className=\"tag is-grey-dark is-rounded order\">\n                {idx + 1}\n              </span>\n              {\n                isBin ? (\n                  <span className=\"icon icon-delete has-text-grey-light\" onClick={() => props.restoreField(idx)}>\n                    <i className=\"fas fa-lg fa-plus-circle\"></i>\n                  </span>\n                ) : (\n                    <span className=\"icon icon-delete has-text-grey-light\" onClick={() => props.onDelete(idx)}>\n                      <i className=\"fas fa-lg fa-minus-circle\"></i>\n                    </span>\n                  )\n              }\n\n            </div>\n            <div className=\"level-item\">\n              <span className={`icon ${isMandatory ? 'has-text-success' : 'has-text-grey-light'}`}>\n                <i className={isMandatory ? 'fas fa-lg fa-toggle-on' : 'fas fa-lg fa-toggle-off'}></i>\n              </span>\n              &nbsp;\n              <div className=\"dropdown is-hoverable\">\n                <div className=\"dropdown-trigger\">\n                  <span className=\"icon has-text-grey-light\">\n                    <i className=\"fas fa-info-circle\"></i>\n                  </span>\n                </div>\n                <div className=\"dropdown-menu\">\n                  <div className=\"dropdown-content\">\n                    {\n                      expectedValues.length ?\n                        expectedValues.map((val, indx) => <span key={indx} className=\"dropdown-item\">{val}</span>) : <span className=\"dropdown-item\">No details</span>\n                    }\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  )\n}\nexport default ListItem","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux'\nimport SortableList from './components/SortableList'\nimport ListItem from './components/ListItem'\n//import fields from './mocks/fields'\nimport {\n  getFields,\n  updateFields,\n  deleteField,\n  restoreField,\n  resetFields,\n  saveFields\n} from './actions'\n\nclass App extends PureComponent {\n  componentDidMount = () => {\n    this.props.getFields()\n  };\n  _saveFields = () => {\n    const { fields = [] } = this.props\n    this.props.saveFields(fields)\n  }\n  render() {\n    const {\n      //loading = false,\n      fields = [],\n      bin = [],\n      saving = false\n    } = this.props\n    return (\n      <div className=\"section has-background-white-bis\">\n        <div className=\"container\">\n          <article className=\"panel is-primary\">\n            <p className=\"panel-heading\">\n              Fields and Allowed Values\n          </p>\n            <div className=\"panel-body\">\n              <div className=\"level\">\n                <div className=\"level-left\">\n                  <div className=\"level-item\">\n                    <h2 className=\"subtitle\">Standard Fields</h2>\n                  </div>\n                </div>\n                <div className=\"level-right\">\n                  <div className=\"level-item\">\n                    <button className=\"button is-link\" onClick={this.props.resetFields}>Reset</button>\n                    &nbsp;\n                    <button className={`button is-success ${saving ? 'is-loading' : ''}`} onClick={this._saveFields}>Save</button>\n                  </div>\n                </div>\n              </div>\n              <SortableList\n                data={fields}\n                ListItem={ListItem}\n                updateFields={this.props.updateFields}\n                deleteField={this.props.deleteField}\n              />\n              <h2 className=\"subtitle\">Deleted Fields</h2>\n              {bin.length ? (\n                <div className=\"columns is-multiline\">\n                  {\n                    bin.map((item, idx) => (\n                      <ListItem\n                        item={item} key={idx} isBin={true}\n                        restoreField={this.props.restoreField}\n                        idx={idx}\n                      />))\n                  }\n                </div>\n              ) : <div className=\"notification\">No Items</div>}\n            </div>\n          </article>\n        </div>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => state\nconst mapDispatchToProps = (dispatch) => ({\n  getFields: () => dispatch(getFields()),\n  updateFields: fields => dispatch(updateFields(fields)),\n  deleteField: position => dispatch(deleteField(position)),\n  restoreField: position => dispatch(restoreField(position)),\n  resetFields: () => dispatch(resetFields()),\n  saveFields: (fields) => dispatch(saveFields(fields))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import { actiontypes } from './constants'\nimport axios from 'axios'\nconst getFields = () => {\n  const resourceURI = 'http://54.193.89.54:8230/readFields'\n  const promise = axios.get(resourceURI)\n  return {\n    resourceURI,\n    promise,\n    type: actiontypes.GET_FIELDS\n  }\n}\n\nconst updateFields = (fields = []) => {\n  return {\n    fields,\n    type: actiontypes.UPDATE_FIELDS\n  }\n}\nconst deleteField = position => {\n  return {\n    position,\n    type: actiontypes.DELETE_FIELD\n  }\n}\nconst restoreField = position => {\n  return {\n    position,\n    type: actiontypes.RESTORE_FIELD\n  }\n}\nconst resetFields = () => {\n  return {\n    type: actiontypes.RESET_FIELDS\n  }\n}\nconst saveFields = (fields = []) => {\n  const updatedFields = fields.map((field, idx) => ({ ...field, order: idx + 1 }))\n  const resourceURI = 'http://54.193.89.54:8230/saveFields'\n  const promise = axios.post(resourceURI, updatedFields)\n  return {\n    resourceURI,\n    promise,\n    type: actiontypes.SAVE_FIELDS\n  }\n}\nexport {\n  getFields,\n  updateFields,\n  deleteField,\n  restoreField,\n  resetFields,\n  saveFields\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport createStore from './store/configureStore'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/main.scss';\n\nconst store = createStore({\n  loading: false,\n  fields: [],\n  backup: [],\n  bin: []\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport createLogger from 'redux-logger';\nimport promiseMiddleware from './promiseMiddleware';\nimport rootReducer from '../reducer';\n\nexport default function configureStore(initialState) {\n  let isDebuggingInChrome = process.env.NODE_ENV === 'development' && !!window.navigator.userAgent;\n  let middleware = [thunk, promiseMiddleware];\n  if(isDebuggingInChrome){\n    middleware.push(createLogger)\n  }\n  let finalCreateStore = compose(applyMiddleware(...middleware))(createStore);\n  const store = finalCreateStore(rootReducer, initialState);\n  if (isDebuggingInChrome) {\n    window.store = store;\n  }\n  return store;\n}\n"],"sourceRoot":""}